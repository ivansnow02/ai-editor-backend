from typing import Any, AsyncGenerator, AsyncIterator, Generator, List, Optional
from urllib import response
from erniebot_agent.memory.messages import AIMessage, AIMessageChunk
from langchain.callbacks.manager import CallbackManagerForLLMRun
from langchain.llms.base import LLM
from pydantic import Field
from erniebot_agent.chat_models import ERNIEBot
from erniebot_agent.memory import HumanMessage, SystemMessage, Message

MODEL = "ernie-speed"

async def complete(prompt) -> str:

    model = ERNIEBot(model=MODEL)

    messages: List[Message] = [
        HumanMessage(content=prompt),
    ]
    response: AIMessage = await model.chat(
        messages=messages,
        system=SystemMessage(
            content="你是一个专业的文本续写模型，你的任务是续写下面的文本。你必须提取出所有的要点并尽可能地按照原文的风格续写。"
        ).content
    )
    return response.content


async def abstract(prompt:str, word_count:int) -> str:

    model = ERNIEBot(model=MODEL)
    messages: List[Message] = [
        HumanMessage(content=prompt),
    ]
    response: AIMessage = await model.chat(
        messages=messages,
        system=SystemMessage(
            content=f"你是一个专业的文本摘要模型，你的任务是提取出所有的要点来摘要下面的文本。字数尽可能地限制为{str(word_count)}字。"
        ).content,
    )
    return response.content


async def translate(prompt:str, lang:str) -> str:
    
    model = ERNIEBot(model=MODEL)
    messages: List[Message] = [
        HumanMessage(content=prompt),
    ]
    response: AIMessage = await model.chat(
        messages=messages,
        system=SystemMessage(
            content=f"你是一个专业的文本翻译模型，你的任务是将下面的文本翻译成{lang}。"
        ).content,
    )
    return response.content    

async def polish(prompt:str,style:str) -> str:
    model = ERNIEBot(model=MODEL)
    messages: List[Message] = [
        HumanMessage(content=prompt),
    ]
    response: AIMessage = await model.chat(
        messages=messages,
        system=SystemMessage(
            content=f"你是一个专业的文本润色模型，你的任务是按照{style}风格修改文本。只需要输出修改后的文本。"
        ).content,
    )
    return response.content

async def fix(prompt:str) -> str:
    model = ERNIEBot(model=MODEL)
    messages: List[Message] = [
        HumanMessage(content=prompt),
    ]
    response: AIMessage = await model.chat(
        messages=messages,
        system=SystemMessage(
            content=f"你是一个专业的病句改写模型，你的任务是检查文本中的语病并修改，但尽量不要改变原有的意思。只需要输出修改后的文本。"
        ).content,
    )
    return response.content


async def complete_stream(prompt) -> AsyncGenerator[Any, Any]:
    """
    Generates a stream of completed text chunks based on the given prompt.

    Args:
        prompt: The initial text prompt to start the completion.

    Yields:
        Any: A completed text chunk generated by the model.

    """
    model = ERNIEBot(model=MODEL)

    messages: List[Message] = [
        HumanMessage(content=prompt),
    ]
    ai_message: AsyncIterator[AIMessageChunk] = await model.chat(
        messages=messages,
        stream=True,
        system=SystemMessage(
            content="你是一个专业的文本续写模型，你的任务是续写下面的文本。你必须提取出所有的要点并尽可能地按照原文的风格续写。"
        ).content
    )
    async for chunk in ai_message:
        yield chunk.content

async def abstract_stream(prompt:str, word_count:int) -> AsyncGenerator[Any, Any]:
    """
    Generates a stream of abstracted text chunks based on the given prompt.

    Args:
        prompt: The initial text prompt to start the abstraction.
        word_count: The desired word count for the abstracted text.

    Yields:
        Any: An abstracted text chunk generated by the model.

    """
    model = ERNIEBot(model=MODEL)
    messages: List[Message] = [
        HumanMessage(content=prompt),
    ]
    ai_message: AsyncIterator[AIMessageChunk] = await model.chat(
        messages=messages,
        stream=True,
        system=SystemMessage(
            content=f"你是一个专业的文本摘要模型，你的任务是提取出所有的要点来摘要下面的文本。字数尽可能地限制为{str(word_count)}字。"
        ).content,
    )
    async for chunk in ai_message:
        yield chunk.content

async def translate_stream(prompt:str, lang:str) -> AsyncGenerator[Any, Any]:
    """
    Generates a stream of translated text chunks based on the given prompt.

    Args:
        prompt: The initial text prompt to start the translation.
        lang: The target language for the translation.

    Yields:
        Any: A translated text chunk generated by the model.

    """
    model = ERNIEBot(model=MODEL)
    messages: List[Message] = [
        HumanMessage(content=prompt),
    ]
    ai_message: AsyncIterator[AIMessageChunk] = await model.chat(
        messages=messages,
        stream=True,
        system=SystemMessage(
            content=f"你是一个专业的文本翻译模型，你的任务是将下面的文本翻译成{lang}。"
        ).content,
    )
    async for chunk in ai_message:
        yield chunk.content

async def polish_stream(prompt:str,style:str) -> AsyncGenerator[Any, Any]:
    """
    Generates a stream of polished text chunks based on the given prompt.

    Args:
        prompt: The initial text prompt to start the polishing.
        style: The target style for the polishing.

    Yields:
        Any: A polished text chunk generated by the model.

    """
    model = ERNIEBot(model=MODEL)
    messages: List[Message] = [
        HumanMessage(content=prompt),
    ]
    ai_message: AsyncIterator[AIMessageChunk] = await model.chat(
        messages=messages,
        stream=True,
        system=SystemMessage(
            content=f"你是一个专业的文本润色模型，你的任务是按照{style}风格修改文本。只需要输出修改后的文本。"
        ).content,
    )
    async for chunk in ai_message:
        yield chunk.content

async def fix_stream(prompt:str) -> AsyncGenerator[Any, Any]:
    """
    Generates a stream of fixed text chunks based on the given prompt.

    Args:
        prompt: The initial text prompt to start the fixing.

    Yields:
        Any: A fixed text chunk generated by the model.

    """
    model = ERNIEBot(model=MODEL)
    messages: List[Message] = [
        HumanMessage(content=prompt),
    ]
    ai_message: AsyncIterator[AIMessageChunk] = await model.chat(
        messages=messages,
        stream=True,
        system=SystemMessage(
            content=f"你是一个专业的病句改写模型，你的任务是检查文本中的语病并修改，但尽量不要改变原有的意思。只需要输出修改后的文本。"
        ).content,
    )
    async for chunk in ai_message:
        yield chunk.content

if __name__ == "__main__":
    
    async def main():
        async for x in complete_stream("今天天气不错"):
            print(x)
    
    import asyncio
    asyncio.run(main())
